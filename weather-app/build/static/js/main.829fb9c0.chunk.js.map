{"version":3,"sources":["Components/Error Modal/index.js","Hooks/useModal.js","config/index.js","utils/index.js","Components/Map/index.js","App.js","Hooks/useUserisonline.js","index.js"],"names":["ErrorModal","modal","centered","hidemodal","message","centeredmodal","undefined","Modal","show","onHide","severity","useModal","useState","showmodal","modalmessage","setmodalmessage","axiosinstance","axios","create","baseURL","UserisonlineContext","createContext","convertkelvintocelcius","temp","parseFloat","toFixed","properformattedtime","time","formattedtime","split","amapm","hours","length","minutes","seconds","DisplayMap","map","coordinates","useEffect","getCenter","lat","lng","Latitude","Longtitude","newmapLatLng","L","LatLng","flyTo","getZoom","WeatherMap","weatherdata","saveweatherdata","setMap","showmodalwithmessage","mapquery","useMediaQuery","markerref","useRef","tooltipref","props","modalprops","isonline","useContext","current","_container","style","backgroundColor","border","displaymap","useMemo","Object","keys","MapContainer","center","height","zoom","scrollWheelZoom","whenCreated","TileLayer","attribution","url","Marker","ref","position","Tooltip","offset","direction","opacity","permanent","Alert","className","variant","name","src","icon","alt","description","temperature","minimum_temperature","maximum_temperature","sunrisetime","sunsettime","speed","humidity","onClick","navigator","permissions","query","then","state","catch","locate","on","e","latlng","post","data","weather","wind","main","temp_min","temp_max","setLatLng","error","App","weatherlocation","changeweatherlocation","changecoordinates","onlinecheck","online","changeonlinestatus","useOnlineConnectivityCheck","MakeApiRequest","useCallback","currentweatherlocation","coord","lon","findweatherforalocation","trim","mapprops","TextField","size","value","onKeyPress","key","onChange","target","InputProps","endAdornment","InputAdornment","IconButton","rel","href","color","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.829fb9c0.chunk.js","sourcesContent":["import { Modal } from 'react-bootstrap';\r\nimport Alert from '@mui/material/Alert';\r\nexport const ErrorModal = ({ modal, centered, hidemodal, message }) => {\r\n    const centeredmodal = centered === undefined ? true : false\r\n    return (\r\n        <Modal\r\n            show={modal}\r\n            centered={centeredmodal}\r\n            onHide={hidemodal}\r\n        >\r\n            <Alert severity=\"error\">\r\n                <strong>{message}</strong>\r\n            </Alert>\r\n        </Modal>\r\n    )\r\n}","import { useState } from \"react\";\r\n\r\nexport const useModal = () => {\r\n    const [modal, showmodal] = useState(false)\r\n    const [modalmessage, setmodalmessage] = useState(\"\")\r\n    const hidemodal = () => {\r\n        showmodal(false)\r\n    }\r\n    const showmodalwithmessage = (message) => {\r\n        setmodalmessage(message)\r\n        showmodal(true)\r\n    }\r\n    return [modal,showmodal, hidemodal, modalmessage, setmodalmessage, showmodalwithmessage]\r\n}","import axios from \"axios\";\r\n// 'https://weather-app-97.herokuapp.com/'\r\n// 'http://localhost:5000'\r\nexport const axiosinstance = axios.create({\r\n    baseURL:'https://weather-app-97.herokuapp.com'\r\n})","import {createContext} from 'react'\r\n\r\nexport const UserisonlineContext = createContext() \r\n\r\nexport const convertkelvintocelcius = (temp) => {\r\n    return parseFloat(temp - 273.15).toFixed(2)\r\n}\r\n\r\nexport const properformattedtime = (time) => {\r\n    const formattedtime = time.split(\":\")\r\n    const amapm = formattedtime[0] >= 12 ? \"p.m.\" :\"a.m.\"\r\n    let hours = formattedtime[0] % 12\r\n    hours = hours ? hours.length > 1 ? hours:`0${hours}` :12    \r\n    let minutes = formattedtime[1].length > 1 ? formattedtime[1]:`0${formattedtime[1]}`\r\n    let seconds = formattedtime[2].length > 1 ? formattedtime[2] : `0${formattedtime[2]}`\r\n    return `${hours}:${minutes}:${seconds} ${amapm}`\r\n}\r\n\r\n","import { MapContainer, TileLayer, Marker, Tooltip } from 'react-leaflet'\r\nimport React, { useState, useMemo, useEffect, useRef, useContext } from 'react';\r\nimport L from 'leaflet'\r\nimport './index.css'\r\nimport { Alert } from 'react-bootstrap';\r\nimport { ErrorModal } from '../Error Modal'\r\nimport { useModal } from '../../Hooks'\r\nimport { axiosinstance } from '../../config'\r\nimport { convertkelvintocelcius, properformattedtime, UserisonlineContext } from '../../utils'\r\nimport { useMediaQuery } from '@mui/material';\r\n\r\nfunction DisplayMap({ map, coordinates }) {\r\n\r\n    useEffect(() => {\r\n        const { lat, lng } = map.getCenter()\r\n        const [Latitude, Longtitude] = coordinates\r\n\r\n        if (lat !== Latitude || lng !== Longtitude) {\r\n            const newmapLatLng = new L.LatLng(Latitude, Longtitude)\r\n            map.flyTo(newmapLatLng, map.getZoom())\r\n        }\r\n    }, [map, coordinates])\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const WeatherMap = ({ coordinates, weatherdata, saveweatherdata }) => {\r\n    const [map, setMap] = useState(null)\r\n    const [modal, , hidemodal, message, , showmodalwithmessage] = useModal()\r\n\r\n    const mapquery = useMediaQuery('(max-width:500px)')\r\n\r\n\r\n    const markerref = useRef()\r\n    const tooltipref = useRef()\r\n\r\n    const props = { map, coordinates }\r\n    const modalprops = { modal, hidemodal, message }\r\n\r\n    const isonline = useContext(UserisonlineContext)\r\n    useEffect(() => {\r\n        if (map !== null && tooltipref.current !== undefined && tooltipref.current !== null) {\r\n            tooltipref.current._container.style.backgroundColor = \"#fff3cd\"\r\n            tooltipref.current._container.style.border = \"none\"\r\n        }\r\n    }, [map])\r\n\r\n    const displaymap = useMemo(\r\n\r\n        () => (\r\n            <>\r\n                {Object.keys(weatherdata).length > 0 &&\r\n                    <MapContainer\r\n                        center={coordinates}\r\n                        style={{ height: `${mapquery === true ? \"135vh\":\"100vh\"}` }}\r\n                        zoom={10}\r\n                        scrollWheelZoom={true}\r\n                        whenCreated={setMap}>\r\n                        <TileLayer\r\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n\r\n\r\n                        <Marker ref={markerref} position={coordinates} >\r\n                            <Tooltip ref={tooltipref} offset={[-15, -15]} direction=\"top\" opacity={1} permanent>\r\n\r\n\r\n                                <Alert className=\"bordernone\" variant=\"warning\">\r\n                                    <h3 className=\"text-center\">{weatherdata.name} </h3>\r\n                                    <div className=\"weathergrid\">\r\n                                        <div>\r\n                                            <div className=\"weatherimagecontainer\"><img src={`https://openweathermap.org/img/wn/${weatherdata.icon}.png`} alt={weatherdata.description} /> </div>\r\n                                            <p className=\"weatherimagecontainer\">{weatherdata.description}</p>\r\n                                            <p className=\"weatherimagecontainer\">{weatherdata.temperature}°C</p>\r\n                                        </div>\r\n\r\n                                        <div className=\"weatherdatagrid\">\r\n\r\n                                            <div>\r\n                                                <p>Minimum Temperature:{weatherdata.minimum_temperature}°C </p>\r\n                                                <p>Maximum Temperature:{weatherdata.maximum_temperature}°C </p>\r\n                                            </div>\r\n                                            <div>\r\n                                                <p>Sunrise: {weatherdata.sunrisetime}</p>\r\n                                                <p>Sunset: {weatherdata.sunsettime}</p>\r\n                                            </div>\r\n                                            <div>\r\n                                                <p>Wind Speed: {weatherdata.speed}m/s</p>\r\n                                                <p>Humidity: {weatherdata.humidity}%</p>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </Alert>\r\n                            </Tooltip>\r\n                        </Marker>\r\n\r\n\r\n                    </MapContainer>\r\n                }\r\n\r\n            </>\r\n\r\n        ),\r\n        [coordinates, weatherdata, mapquery]\r\n    )\r\n\r\n    const findcurrentuserlocation = () => {\r\n        navigator.permissions.query({ name: 'geolocation' })\r\n            .then(\r\n                ({ state }) => {\r\n                    if (state === \"denied\") {\r\n                        showmodalwithmessage(\"You have block location access. Please allow location access in the browser.\")\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            ).catch(() => {\r\n                showmodalwithmessage(\"Sorry your current browser does not support location-tracking feature\")\r\n\r\n            })\r\n\r\n        if (isonline !== true) {\r\n            showmodalwithmessage(\"You are offline. Please check your Internet Connection.\")\r\n            return\r\n        }\r\n\r\n        if (map !== undefined && map !== null) {\r\n            try {\r\n                map.locate()\r\n                map.on('locationfound', (e) => {\r\n\r\n                    const { lat, lng } = e.latlng\r\n\r\n                    axiosinstance.post(\"/getlocatondatabylatlng\", { lat, lng }).then(({ data }) => {\r\n                        const { name, weather: [{ icon, description }], wind: { speed }, main: { temp, temp_min, temp_max, humidity }, sunrisetime, sunsettime } = data\r\n                        map.flyTo(e.latlng, map.getZoom())\r\n                        markerref.current.setLatLng(e.latlng)\r\n                        saveweatherdata({ name, icon, sunrisetime: properformattedtime(sunrisetime), sunsettime: properformattedtime(sunsettime), description, speed, temperature: convertkelvintocelcius(temp), minimum_temperature: convertkelvintocelcius(temp_min), maximum_temperature: convertkelvintocelcius(temp_max), humidity })\r\n                    }).catch(() => {\r\n                        showmodalwithmessage(\"Sorry location data for your location could not be found\")\r\n                    })\r\n                })\r\n\r\n            }\r\n            catch (error) {\r\n\r\n                showmodalwithmessage(\"Sorry something went wrong while trying to fetch your location\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={findcurrentuserlocation} className=\"text-info d-flex justify-content-end smalltext\">\r\n                Allow location access\r\n            </div>\r\n            {\r\n                map ? <DisplayMap {...props} /> : null\r\n            }\r\n            {displaymap}\r\n\r\n            <ErrorModal {...modalprops} />\r\n\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect, useCallback, useContext } from 'react';\r\nimport { WeatherMap, ErrorModal } from './Components'\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { axiosinstance } from './config'\r\nimport { convertkelvintocelcius, properformattedtime, UserisonlineContext } from './utils'\r\nimport { useModal, useOnlineConnectivityCheck } from './Hooks'\r\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\r\nimport TwitterIcon from '@mui/icons-material/Twitter';\r\nimport { Alert } from 'react-bootstrap';\r\nimport ErrorRoundedIcon from '@mui/icons-material/ErrorRounded';\r\n\r\nfunction App() {\r\n  const [weatherlocation, changeweatherlocation] = useState(\"\")\r\n  const [modal, , hidemodal, message, , showmodalwithmessage] = useModal()\r\n  const [weatherdata, saveweatherdata] = useState({})\r\n  const [coordinates, changecoordinates] = useState([23.2667, 77.4])\r\n  const isonline = useContext(UserisonlineContext)\r\n  const onlinecheck = useOnlineConnectivityCheck(isonline, weatherdata)\r\n\r\n  const MakeApiRequest = useCallback((currentweatherlocation = \"Bhopal\") => {\r\n    if (isonline !== true) {\r\n      showmodalwithmessage(\"You are offline. Please check your Internet Connection.\")\r\n      return\r\n    }\r\n    axiosinstance.post(`/getlocatondata/${currentweatherlocation}`).then(({ data }) => {\r\n      const { coord: { lat, lon }, weather: [{ icon, description }], wind: { speed }, main: { temp, temp_min, temp_max, humidity }, sunrisetime, sunsettime } = data\r\n\r\n      saveweatherdata({ name: currentweatherlocation, icon, sunrisetime: properformattedtime(sunrisetime), sunsettime: properformattedtime(sunsettime), description, speed, temperature: convertkelvintocelcius(temp), minimum_temperature: convertkelvintocelcius(temp_min), maximum_temperature: convertkelvintocelcius(temp_max), humidity })\r\n      changecoordinates([lat, lon])\r\n    }).catch(() => {\r\n      showmodalwithmessage(\"Sorry weather data for your location could not be found\")\r\n    })\r\n  }, [showmodalwithmessage, isonline])\r\n\r\n  const findweatherforalocation = () => {\r\n    const currentweatherlocation = weatherlocation.trim()\r\n    if (currentweatherlocation.length === 0) {\r\n      showmodalwithmessage(\"Input field cannot be empty\")\r\n      return\r\n    }\r\n    MakeApiRequest(currentweatherlocation)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(weatherdata).length === 0) {\r\n      MakeApiRequest()\r\n    }\r\n  }, [weatherdata, MakeApiRequest])\r\n\r\n  const mapprops = {\r\n    weatherdata, coordinates, saveweatherdata\r\n  }\r\n\r\n  const props = { modal, hidemodal, message }\r\n  return (\r\n    <div >\r\n      {\r\n        onlinecheck === true ?\r\n          <>\r\n            <div className=\"d-flex justify-content-center mt-5 mb-3\">\r\n\r\n              <div className=\"d-flex flex-column\">\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                  <strong>Enter  location:</strong>\r\n                </div>\r\n                <div className=\"d-flex justify-content-center \">\r\n                  <TextField\r\n                    size=\"small\"\r\n                    value={weatherlocation}\r\n                    onKeyPress={(e) => {\r\n\r\n                      if (e.key === 'Enter') {\r\n                        findweatherforalocation()\r\n                      }\r\n                    }}\r\n\r\n                    onChange={(e) => changeweatherlocation(e.target.value)}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton onClick={findweatherforalocation}>\r\n                            <SearchIcon />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      )\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div >\r\n              <WeatherMap {...mapprops} />\r\n            </div>\r\n            {\r\n              Object.keys(weatherdata).length > 0 &&\r\n              <div className=\"mt-3 d-flex justify-content-center\">\r\n              <Alert variant=\"info\">\r\n                <div>\r\n                  <h5><p>Contact developer</p></h5>\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <a rel=\"noreferrer\" href=\"https://twitter.com/ashwin_nema\" target=\"_blank\"><TwitterIcon color=\"primary\" ></TwitterIcon>  </a>\r\n                    <a rel=\"noreferrer\" href=\"https://www.linkedin.com/in/ashwin-nema-4223671a5/\" target=\"_blank\"><LinkedInIcon color=\"primary\" ></LinkedInIcon>  </a>\r\n                  </div>\r\n                </div>\r\n              </Alert>\r\n\r\n            </div>\r\n            }\r\n            <ErrorModal {...props} />\r\n          </> :\r\n\r\n          <div className=\"d-flex justify-content-center mt-5\">\r\n            <Alert variant=\"danger\">\r\n              <ErrorRoundedIcon style={{ color: \"red\" }} />\r\n              You are offline. Please check your Internet Connection.\r\n            </Alert>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { useEffect, useState } from \"react\";\r\n\r\nexport const useOnlineConnectivityCheck = (online, weatherdata) => {\r\n    const [UserisonlineContext, changeonlinestatus] = useState(online)\r\n    useEffect(() => {\r\n        if (Object.keys(weatherdata).length === 0 && !online) {\r\n            changeonlinestatus(false)\r\n            return\r\n        }\r\n        if (!online) {\r\n            changeonlinestatus(true)\r\n        }\r\n    },[changeonlinestatus, weatherdata, online])\r\n\r\n    return UserisonlineContext\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {UserisonlineContext} from './utils'\r\nimport {Detector} from 'react-detect-offline'\r\n\r\nReactDOM.render(\r\n  <Detector render={({online})=> (\r\n    <UserisonlineContext.Provider value={online}>\r\n      <App />\r\n    </UserisonlineContext.Provider>\r\n  ) } />\r\n   ,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}